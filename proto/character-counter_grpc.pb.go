// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: character-counter.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CharacterCounterClient is the client API for CharacterCounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterCounterClient interface {
	CountCharacters(ctx context.Context, in *CountCharactersRequest, opts ...grpc.CallOption) (*CountCharactersResponse, error)
}

type characterCounterClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterCounterClient(cc grpc.ClientConnInterface) CharacterCounterClient {
	return &characterCounterClient{cc}
}

func (c *characterCounterClient) CountCharacters(ctx context.Context, in *CountCharactersRequest, opts ...grpc.CallOption) (*CountCharactersResponse, error) {
	out := new(CountCharactersResponse)
	err := c.cc.Invoke(ctx, "/frontend.CharacterCounter/CountCharacters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterCounterServer is the server API for CharacterCounter service.
// All implementations must embed UnimplementedCharacterCounterServer
// for forward compatibility
type CharacterCounterServer interface {
	CountCharacters(context.Context, *CountCharactersRequest) (*CountCharactersResponse, error)
	mustEmbedUnimplementedCharacterCounterServer()
}

// UnimplementedCharacterCounterServer must be embedded to have forward compatible implementations.
type UnimplementedCharacterCounterServer struct {
}

func (UnimplementedCharacterCounterServer) CountCharacters(context.Context, *CountCharactersRequest) (*CountCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCharacters not implemented")
}
func (UnimplementedCharacterCounterServer) mustEmbedUnimplementedCharacterCounterServer() {}

// UnsafeCharacterCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterCounterServer will
// result in compilation errors.
type UnsafeCharacterCounterServer interface {
	mustEmbedUnimplementedCharacterCounterServer()
}

func RegisterCharacterCounterServer(s grpc.ServiceRegistrar, srv CharacterCounterServer) {
	s.RegisterService(&CharacterCounter_ServiceDesc, srv)
}

func _CharacterCounter_CountCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterCounterServer).CountCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontend.CharacterCounter/CountCharacters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterCounterServer).CountCharacters(ctx, req.(*CountCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterCounter_ServiceDesc is the grpc.ServiceDesc for CharacterCounter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterCounter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frontend.CharacterCounter",
	HandlerType: (*CharacterCounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountCharacters",
			Handler:    _CharacterCounter_CountCharacters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "character-counter.proto",
}
